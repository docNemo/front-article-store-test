name: Build and Deploy

on:
  push:
    branches: [ "master", "develop", "feature/*" ]
#  pull_request:
#    branches: [ "master", "develop", "feature/*" ]

env:
  REGISTRY: ghcr.io

  DOCKERFILE: "Dockerfile"
  IMAGE_NAME: ${{ github.repository }}

  APPLICATION_NAME: "front-article-store-test"
  OS_PROJECT: "article-store-test"
  APP_TEMPLATE: "DeploymentConfig.yml"
  HOST_PORT: "8080"
  OS_ROUTE: "apps.os-lab-1.neo"

jobs:
  build-and-deploy:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Print env
        run: |
          echo "$GITHUB_CONTEXT"

      - name: Checkout repository
        uses: actions/checkout@v3

#       BUILD STATIC
      - name: Setup Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: npm --version
      - run: ls -a
      - run: npm ci
      - run: npm run build

#       BUILD DOCKER CONTAINER
      - name: Prepare branch name
        uses: jungwinter/split@master
        id: branch
        with:
          msg: ${{ github.head_ref || github.ref_name }}
          separator: "/"
          maxsplit: -1

      - name: Image name to lowercase
        id: prepare-image-name
        uses: ASzc/change-string-case-action@v5
        with:
          string: ${{ env.IMAGE_NAME }}

      - name: Prepare image name
        run: echo "IMAGE_NAME=${{ steps.prepare-image-name.outputs.lowercase }}" >> $GITHUB_ENV

      - name: Prepare tags
        id: meta
        run: |
          echo "::set-output name=version::${{ steps.branch.outputs._1 || steps.branch.outputs._0 }}"
          echo "::set-output name=tags::${{ env.IMAGE_NAME }}:${{ steps.branch.outputs._1 || steps.branch.outputs._0 }}"

      - name: Log into registry ${{ env.REGISTRY }}
        run: docker login ${{ env.REGISTRY }} --username ${{ github.actor }} --password ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        id: build-and-push
        run: |
          docker build --tag ${{ env.REGISTRY }}/${{ steps.meta.outputs.tags }} . -f ${{ env.DOCKERFILE }}
          docker push ${{ env.REGISTRY }}/${{ steps.meta.outputs.tags }}
          clear_sha=$(docker images --digests | grep ${{ steps.meta.outputs.version }} | awk '{print $3}')
          echo "::set-output name=sha::$clear_sha"

#       DEPLOY
      - name: ZeroTier
        uses: zerotier/github-action@v1.0.1
        with:
          network_id: ${{ secrets.ZEROTIER_NETWORK_ID }}

      - name: Install oc
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          oc: 4

      - name: Add OS host to resolv.conf
        run: |
          sudo mv /etc/resolv.conf /etc/resolv1.conf
          cat /etc/resolv1.conf | sudo tee -a /etc/resolv.conf
          echo "nameserver ${{ secrets.DNS_IP }}" | sudo tee -a /etc/resolv.conf

      - name: Log in to OpenShift
        run: |
          oc login -u ${{ secrets.LOGIN_OS }} -p ${{ secrets.PASSWORD_OS }} --server=https://${{ secrets.OPENSHIFT_SERVER }}:6443 --insecure-skip-tls-verify
          oc project ${{ env.OS_PROJECT }}

      - run: oc whoami

      - name: Deploy to OS
        run: |
          oc process -f config/openshift/${{ env.APP_TEMPLATE }} \
          -p APPLICATION_NAME=${{ env.APPLICATION_NAME }}-${{ steps.meta.outputs.version }} \
          -p HOST_PORT=${{ env.HOST_PORT }} \
          -p IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
          -p IMAGE_SHA=${{ steps.build-and-push.outputs.sha }} \
          -p OS_ROUTE=${{ env.OS_ROUTE }} | oc apply -f -

      - name: Logout from OpenShift
        run: oc logout
